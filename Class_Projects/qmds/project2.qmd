---
title: "Client Report - [Project 2_ Late flights and missing data]"
subtitle: "Course DS 250"
author: "[Samantha Powell]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import json

# Load JSON data
with open('flights_missing.json', 'r') as f:
    data = json.load(f)

# Create a DataFrame
df = pd.DataFrame(data)

# Replace non-numeric characters in numeric columns and convert to NaN
df['num_of_delays_carrier'] = pd

```


## Elevator pitch: After looking over flight data from the seven major airports, we found that O'Hare (ORD) has the worst delays, with over 30% of flights impacted and average delays of 2.6 hours, mostly due to carrier issues. If you're looking for the best time to fly, February stands out with the lowest delay rate at just 7.2%. 


```{python}
#| label: project-data
#| code-summary: Read and format project data

# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_csv("https://raw.githubusercontent.com/byuidatascience/data4python4ds/master/data-raw/mpg/mpg.csv")
```


## Question 1


```{python}
#| label: Q1

import pandas as pd
import numpy as np
import json

# Step 1: Load the data from flights_missing.json
with open('flights_missing.json', 'r') as f:
    data = json.load(f)

# Convert the JSON data to a DataFrame
df = pd.DataFrame(data)

# Step 2: Replace varied missing data representations with np.nan (NaN)
# Assuming common placeholders like '', 'NA', 'null', 'None', and any known invalid numbers like -999
df.replace(['', 'NA', 'null', None, -999], np.nan, inplace=True)

# Step 3: Convert any object columns with numeric data to proper numeric types, coercing errors to NaN
numeric_columns = ['num_of_flights_total', 'num_of_delays_carrier', 
                   'num_of_delays_late_aircraft', 'num_of_delays_nas', 
                   'num_of_delays_security', 'num_of_delays_weather', 
                   'num_of_delays_total', 'minutes_delayed_carrier', 
                   'minutes_delayed_late_aircraft', 'minutes_delayed_nas', 
                   'minutes_delayed_security', 'minutes_delayed_weather', 
                   'minutes_delayed_total']

for col in numeric_columns:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Step 4: Select one example row to display as JSON with NaN values
# Choosing the first row with NaN values to illustrate the formatting
example_record = df[df.isna().any(axis=1)].iloc[0].to_dict()
formatted_json = json.dumps(example_record, indent=4, default=str)

# Display the JSON formatted row with NaN values
print("Sample JSON Record with 'NaN' for Missing Values:\n")
print(formatted_json)

```

## Question 2

```{python}
#| label: Q2
import pandas as pd
import numpy as np
import json

# Step 1: Load the JSON data
with open('flights_missing.json', 'r') as f:
    data = json.load(f)

# Step 2: Convert the JSON data to a DataFrame
df = pd.DataFrame(data)

# Step 3: Ensure necessary columns are numeric and handle missing data
# Convert columns to numeric, replacing errors with NaN
for col in ['num_of_delays_carrier', 'num_of_delays_late_aircraft', 'num_of_delays_nas', 
            'num_of_delays_security', 'num_of_delays_weather', 'minutes_delayed_total']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Step 4: Calculate total delays across all delay categories
df['total_delays'] = df[['num_of_delays_carrier', 'num_of_delays_late_aircraft', 
                         'num_of_delays_nas', 'num_of_delays_security', 
                         'num_of_delays_weather']].sum(axis=1)

# Step 5: Group data by airport and calculate required metrics
airport_summary = df.groupby('airport_code').agg(
    total_flights=('num_of_flights_total', 'sum'),
    delayed_flights=('total_delays', 'sum'),
    avg_delay_time=('minutes_delayed_total', 'mean')  # Average delay time in minutes
).reset_index()

# Step 6: Calculate the proportion of delayed flights for each airport
airport_summary['proportion_delayed'] = airport_summary['delayed_flights'] / airport_summary['total_flights']

# Step 7: Sort airports by proportion of delayed flights to find the "worst" airport
worst_airport = airport_summary.sort_values(by='proportion_delayed', ascending=False).iloc[0]

# Step 8: Display the summary table and the worst airport
print(airport_summary)

# Print details of the worst airport
print(f"Worst Airport: {worst_airport['airport_code']}")
print(f"Proportion of Delayed Flights: {worst_airport['proportion_delayed']:.2%}")
print(f"Average Delay Time: {worst_airport['avg_delay_time']:.2f} minutes")

# Description Task 2: The worst airport for delays is ORD (O'Hare International Airport), with the highest proportion of delayed flights at 30.76% and an average delay time of 2.62 hours. The proportion of delayed flights was chosen as the primary metric to reflect the frequency of delays relative to total flights.

```



## Question 3

```{python}
#| label: Q3
import pandas as pd
import matplotlib.pyplot as plt
import json

# Step 1: Load the data from JSON file
with open('flights_missing.json', 'r') as f:
    data = json.load(f)

# Step 2: Convert the JSON data to a DataFrame
df = pd.DataFrame(data)

# Ensure the necessary columns are numeric (in case of missing or incorrect types)
for col in ['num_of_flights_total', 'num_of_delays_carrier', 'num_of_delays_late_aircraft', 
            'num_of_delays_nas', 'num_of_delays_security', 'num_of_delays_weather']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Step 3: Ensure 'month' is properly formatted as strings and drop any missing values in 'month'
df['month'] = df['month'].astype(str).fillna('Unknown')

# Filter out any rows where the month is not properly defined 
df = df[df['month'].isin(['January', 'February', 'March', 'April', 'May', 'June', 
                          'July', 'August', 'September', 'October', 'November', 'December'])]

# Step 4: Calculate total delays across all delay categories 
df['total_delays'] = df[['num_of_delays_carrier', 'num_of_delays_late_aircraft', 
                         'num_of_delays_nas', 'num_of_delays_security', 
                         'num_of_delays_weather']].sum(axis=1)

# Step 5: Group by month and calculate total flights and delayed flights
monthly_summary = df.groupby('month').agg(
    total_flights=('num_of_flights_total', 'sum'),
    delayed_flights=('total_delays', 'sum')
).reset_index()

# Step 6: Calculate the proportion of delayed flights for each month
monthly_summary['proportion_delayed'] = monthly_summary['delayed_flights'] / monthly_summary['total_flights']

# Step 7: Sort the months in the correct order
month_order = ['January', 'February', 'March', 'April', 'May', 'June', 
               'July', 'August', 'September', 'October', 'November', 'December']
monthly_summary['month'] = pd.Categorical(monthly_summary['month'], categories=month_order, ordered=True)
monthly_summary = monthly_summary.sort_values('month')

# Step 8: Plot the proportion of delayed flights by month using matplotlib
plt.figure(figsize=(10, 6))
plt.bar(monthly_summary['month'], monthly_summary['proportion_delayed'], color='blue')
plt.xlabel('Month')
plt.ylabel('Proportion of Delayed Flights')
plt.title('Proportion of Delayed Flights by Month')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Step 9: Find the best month with the lowest proportion of delayed flights
best_month = monthly_summary.sort_values(by='proportion_delayed').iloc[0]
print(f"Best Month to Fly: {best_month['month']}")
print(f"Proportion of Delayed Flights: {best_month['proportion_delayed']:.2%}")

# Description Task 3: The best month to fly is February, with the lowest proportion of delayed flights at 7.2%. Proportion of delayed flights was used as the key metric to show which month experiences the least delays, providing travelers the best chance to avoid disruptions.
```



## Question 4

```{python}
#| label: Q4

import pandas as pd
import matplotlib.pyplot as plt
import json

# Step 1: Load the data from JSON file
with open('flights_missing.json', 'r') as f:
    data = json.load(f)

# Step 2: Convert the JSON data to a DataFrame
df = pd.DataFrame(data)

# Ensure necessary columns are numeric 
for col in ['num_of_flights_total', 'num_of_delays_carrier', 'num_of_delays_late_aircraft', 
            'num_of_delays_nas', 'num_of_delays_security', 'num_of_delays_weather']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Step 3: Replace missing values in 'Late Aircraft' with the mean
df['num_of_delays_late_aircraft'].fillna(df['num_of_delays_late_aircraft'].mean(), inplace=True)

# Step 4: Function to calculate total weather-related delays
def calculate_weather_delays(row):
    # 100% of Weather delays
    weather_delay = row['num_of_delays_weather']
    
    # 30% of Late Aircraft delays are due to weather
    weather_delay += 0.3 * row['num_of_delays_late_aircraft']
    
    # NAS delays: 40% from April to August, 65% in other months
    if row['month'] in ['April', 'May', 'June', 'July', 'August']:
        weather_delay += 0.4 * row['num_of_delays_nas']
    else:
        weather_delay += 0.65 * row['num_of_delays_nas']
    
    return weather_delay

# Step 5: Apply the function to calculate weather delays
df['weather_delays'] = df.apply(calculate_weather_delays, axis=1)

# Step 6: Group by airport and calculate the proportion of flights delayed by weather
weather_summary = df.groupby('airport_code').agg(
    total_flights=('num_of_flights_total', 'sum'),
    total_weather_delays=('weather_delays', 'sum')
).reset_index()

# Calculate the proportion of weather-delayed flights for each airport
weather_summary['prop_weather_delayed'] = weather_summary['total_weather_delays'] / weather_summary['total_flights']

# Step 7: Plot the proportion of weather-delayed flights by airport
plt.figure(figsize=(10, 6))
plt.bar(weather_summary['airport_code'], weather_summary['prop_weather_delayed'], color='blue')
plt.xlabel('Airport Code')
plt.ylabel('Proportion of Flights Delayed by Weather')
plt.title('Proportion of Flights Delayed by Weather at Each Airport')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Step 8: Display the first few rows of the weather summary
print(weather_summary.head())

```

## Question 5

```{python}
#| label: Q5
import pandas as pd
import matplotlib.pyplot as plt
import json

# Step 1: Load the data from JSON file 
with open('flights_missing.json', 'r') as f:
    data = json.load(f)

# Step 2: Convert the JSON data to a DataFrame 
df = pd.DataFrame(data)

# Ensure necessary columns are numeric 
for col in ['num_of_flights_total', 'num_of_delays_carrier', 'num_of_delays_late_aircraft', 
            'num_of_delays_nas', 'num_of_delays_security', 'num_of_delays_weather']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Step 3: Calculate weather delays 
df['num_of_delays_late_aircraft'].fillna(df['num_of_delays_late_aircraft'].mean(), inplace=True)

def calculate_weather_delays(row):
    # 100% of Weather delays
    weather_delay = row['num_of_delays_weather']
    
    # 30% of Late Aircraft delays are due to weather
    weather_delay += 0.3 * row['num_of_delays_late_aircraft']
    
    # NAS delays: 40% from April to August, 65% in other months
    if row['month'] in ['April', 'May', 'June', 'July', 'August']:
        weather_delay += 0.4 * row['num_of_delays_nas']
    else:
        weather_delay += 0.65 * row['num_of_delays_nas']
    
    return weather_delay

df['weather_delays'] = df.apply(calculate_weather_delays, axis=1)

# Step 4: Group by airport and calculate the proportion of flights delayed by weather
weather_summary = df.groupby('airport_code').agg(
    total_flights=('num_of_flights_total', 'sum'),
    total_weather_delays=('weather_delays', 'sum')
).reset_index()

# Calculate the proportion of weather-delayed flights for each airport
weather_summary['prop_weather_delayed'] = weather_summary['total_weather_delays'] / weather_summary['total_flights']

# Step 5: Create a bar plot to show the proportion of weather-delayed flights at each airport
plt.figure(figsize=(10, 6))
plt.bar(weather_summary['airport_code'], weather_summary['prop_weather_delayed'], color='blue')
plt.xlabel('Airport Code')
plt.ylabel('Proportion of Flights Delayed by Weather')
plt.title('Proportion of Flights Delayed by Weather at Each Airport')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Step 6: Display the first few rows of the weather summary for review
print(weather_summary.head())

# Description Task 5: SFO has the highest proportion of weather-related delays, nearing 0.10, making weather a significant issue at this airport. ORD also experiences notable weather delays, around 0.08, likely due to frequent severe weather conditions. SLC has the lowest proportion of weather delays, indicating fewer disruptions compared to other airports.
```




# Stretch|Challenge

``` {python}
import pandas as pd
import matplotlib.pyplot as plt
import json

# Step 1: Load the data from your JSON file (in case code decides to be finnicky)
with open('flights_missing.json', 'r') as f:
    data = json.load(f)

# Step 2: Convert the JSON data to a DataFrame
df = pd.DataFrame(data)

# Ensure necessary columns are numeric (because how else can we organize them)
for col in ['num_of_flights_total', 'num_of_delays_carrier', 'num_of_delays_late_aircraft', 
            'num_of_delays_nas', 'num_of_delays_security', 'num_of_delays_weather']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Step 3: Calculate total delays for each delay category
df['total_delays'] = df[['num_of_delays_carrier', 'num_of_delays_security', 
                         'num_of_delays_weather']].sum(axis=1)

# Group by airport and calculate total delays for each category
delay_summary = df.groupby('airport_code').agg(
    total_flights=('num_of_flights_total', 'sum'),
    total_carrier_delays=('num_of_delays_carrier', 'sum'),
    total_security_delays=('num_of_delays_security', 'sum'),
    total_weather_delays=('num_of_delays_weather', 'sum')
).reset_index()

# Calculate the proportion of delayed flights for each category
delay_summary['prop_carrier_delayed'] = delay_summary['total_carrier_delays'] / delay_summary['total_flights']
delay_summary['prop_security_delayed'] = delay_summary['total_security_delays'] / delay_summary['total_flights']
delay_summary['prop_weather_delayed'] = delay_summary['total_weather_delays'] / delay_summary['total_flights']

# Step 4: Create a table to compare the delay proportions
comparison_table = delay_summary[['airport_code', 'prop_carrier_delayed', 'prop_security_delayed', 'prop_weather_delayed']]

# Step 5: Plot the comparison of delay proportions for each category
plt.figure(figsize=(10, 6))
plt.bar(delay_summary['airport_code'], delay_summary['prop_carrier_delayed'], color='red', label='Carrier Delay', alpha=0.7)
plt.bar(delay_summary['airport_code'], delay_summary['prop_security_delayed'], color='green', label='Security Delay', alpha=0.7)
plt.bar(delay_summary['airport_code'], delay_summary['prop_weather_delayed'], color='blue', label='Weather Delay', alpha=0.7)
plt.xlabel('Airport Code')
plt.ylabel('Proportion of Delayed Flights')
plt.title('Proportion of Delayed Flights by Carrier, Security, and Weather Delays')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.show()

# Step 6: Display the table for review
print(comparison_table)

# Description Challenge: Carrier delays are the most significant contributor to flight delays across all airports, with SAN having the highest proportion at 0.0622. Weather delays are smaller but still notable, with ATL experiencing the highest weather delay proportion at 0.0073. Security delays are minimal and do not significantly impact the overall delay picture.

```

